<?php

// ======================================= 01
/*

入力例2
5

出力例2
1 2 3 4 5

*/

fscanf(STDIN, "%d", $n);

for ($i = 1; $i <= $n; $i++) {
    if ($i == $n) {
        print($i);
    } else {
        print($i . " ");
    }
}

// ====================================== END

// ======================================= 02
/*

入力例2
7

出力例2
1
2
3
4
5
6
7

*/

fscanf(STDIN, "%d", $n);

function D_loop_02($str)
{

    for ($i = 1; $i <= $str; $i++) {
        if ($i == $str) {
            print($i);
        } else {
            print($i . "\n");
        }
    }
}

D_loop_02($n);


// ====================================== END

// ======================================= 03
/*

入力例1
5

出力例1
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5

*/

fscanf(STDIN, "%d", $n);

function D_loop_03($num)
{

    for ($i = 0; $i < $num; $i++) {
        for ($j = 1; $j <= 5; $j++) {
            if ($j == 5) {
                print($j . "\n");
            } else {
                print($j . " ");
            }
        }
    }
}

D_loop_03($n);

// ====================================== END

// ======================================= 04

fscanf(STDIN, "%d %d", $n, $m);

function D_loop_04($num, $num2)
{
    for ($i = 1; $i <= $num; $i++) {

        for ($j = 1; $j <= $num2; $j++) {
            if ($num2 == $j) {
                print($j . "\n");
            } else {
                print($j . " ");
            }
        }
    }
}

D_loop_04($m, $n);
// ====================================== END

// ======================================= 05

/*

入力例1
3 4
92 15 49 19
20 89 92 47
0 87 42 45

出力例1
92 15 49 19
20 89 92 47
0 87 42 45

*/

fscanf(STDIN, "%d %d", $n, $k);

// === ２次元配列へ値を格納
$arr = [];
for ($i = 0; $i < $n; $i++) {

    //　１行受けとる
    $tmp = trim(fgets(STDIN));
    //　分割して配列へ格納
    $arr[$i] = explode(" ", $tmp);

    //　出力　部分　
    for ($j = 0; $j < $k; $j++) {

        // 末尾だったら、改行コードを入れて改行
        if ($j == $k - 1) {
            print($arr[$i][$j] . "\n");
        } else {
            // 末尾じゃなかったら、、スペースを入れて出力
            print($arr[$i][$j] . " ");
        }
    }
}

// ====================================== END


// ======================================= 07

/*

N K
A_11 A_12 ... A_1K
...
A_N1 A_N2 ... A_NK


・ 1 行で整数 N , K が半角スペース区切りで与えられます。
・ 続く N 行では、二次元配列 A の各要素が半角スペース区切りで与えられます。

入力例1
4 3
0 0 0
0 0 0
0 0 1
0 0 0

出力例1
3 3

*/

fscanf(STDIN, "%d %d", $N, $K);

# ===================
# ２次元配列で、値取得
# ===================
$arr = [];
for ($i = 0; $i < $N; $i++) {
    $tmp_str = trim(fgets(STDIN));
    $arr[$i] = explode(" ", $tmp_str);
}

$result_i = 0;
$result_j = 0;
for ($i = 0; $i < $N; $i++) {
    for ($j = 0; $j < $K; $j++) {

        if ($arr[$i][$j] == 1) {
            $result_i = $i + 1;
            $result_j = $j + 1;
            break;
        }
    }
}

print($result_i . " " . $result_j);

// ====================================== END

// ======================================= 08

/*

整数 N , K と N 行 K 列 の二次元配列 A が与えられます。
 A の要素のうち、最大の要素の値を出力してください。

入力例1
3 3
226 409 419
491 524 82
417 954 751

出力例1
954

*/

fscanf(STDIN, "%d %d", $N, $K);

$arr = [];
$idx = 0;

$arr_count = 0;

for ($i = 0; $i < $N; $i++) {
    // === 値取得
    $tmp_str = trim(fgets(STDIN));
    // === ２次元配列へ格納
    $arr[$i] = explode(" ", $tmp_str);
}

// === 最初の要素を、とりあえず最大値へ設定。
$tmp_max = $arr[0][0];

for ($i = 0; $i < $N; $i++) {
    for ($j = 0; $j < $K; $j++) {
        // === 最大値を更新・格納
        if ($arr[$i][$j] > $tmp_max) {
            $tmp_max = $arr[$i][$j];
        }
    }
}

// 最大値　出力
print($tmp_max);

// ====================================== END

// ======================================= 09

/*

整数 N , K と N 行 K 列 の二次元配列 A が与えられるので、 
A の行ごとの和を出力してください。

入力例1
3 3
1 2 3
4 5 6
7 8 9

出力例1
6
15
24

*/

fscanf(STDIN, "%d %d", $N, $K);

$arr = [];

for ($i = 0; $i < $N; $i++) {

    // === 値取得して、配列へ格納
    $tmp_str = fgets(STDIN);
    $arr_tmp = explode(" ", $tmp_str);

    // === 行の配列の合計を出力
    print(array_sum($arr_tmp) . "\n");
}


// ====================================== END

// ======================================= 10

/*

配列のサイズ K とその要素 A1 ... AK が与えられるので、全ての要素の和を求めて出力してください。

入力例1
3
3 1 2 3
3 4 5 6
3 7 8 9

出力例1
6
15
24

*/

fscanf(STDIN, "%d", $N);

$arr = [];
$tmp_result = 0;
for ($i = 0; $i < $N; $i++) {

    // === 行の和の合計値　初期化
    $tmp_result = 0;

    // === １行取得して、配列へ格納
    $tmp_str = trim(fgets(STDIN));
    $arr_tmp = explode(" ", $tmp_str);

    // === 配列の要素 0 番目分、ループを回して、要素 1以降の値を合計する
    for ($j = 1; $j <= $arr_tmp[0]; $j++) {
        $tmp_result += $arr_tmp[$j];
    }

    //  *** １行の合計値（0 番目の要素を除く）を出力
    print(trim($tmp_result) . "\n");
}




// ====================================== END